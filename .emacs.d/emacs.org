* Basics
** The Very Basics
   #+NAME: emacs-very-basic
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq user-mail-address "eugene.grigoriev@gmail.com")
     (setq user-full-name "Eugene Grigoriev")
     ;(set-face-attribute 'default nil :height 100)
     (put 'overwrite-mode 'disabled t)
     (global-set-key "\C-c\C-a" 'mark-whole-buffer)
     (global-font-lock-mode t)
     (column-number-mode t)
     (global-linum-mode t)
     (auto-compression-mode t)
     (setq-default indent-tabs-mode nil)
     (setq frame-title-format "%b - emacs")
     (setq require-final-newline 't)
   #+END_SRC

   #+RESULTS: emacs-very-basic
   : t

** Disable GUI fluff
   #+NAME: emacs-no-fluff
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq inhibit-splash-screen t)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC

   #+RESULTS: emacs-no-fluff
   | (R . t) | (emacs-lisp . t) |

** Transparency
   #+NAME: emacs-transparency
   #+BEGIN_SRC emacs-lisp :tangle yes
      (set-frame-parameter (selected-frame) 'alpha '(85 50))
      (add-to-list 'default-frame-alist '(alpha 85 50))
   #+END_SRC

   #+RESULTS: emacs-transparency
   | (font . -*-proggyclean-*-*-*-*-*-*-*-*-*-*-iso8859-*) | (alpha 85 50) |

** Font
   #+NAME: emacs-font
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;(add-to-list 'default-frame-alist '(font . "-*-proggyclean-*-*-*-*-*-*-*-*-*-*-iso8859-*"))
   #+END_SRC

   #+RESULTS: emacs-font
   | (font . -*-proggyclean-*-*-*-*-*-*-*-*-*-*-iso8859-*) | (alpha 85 50) |

** URL Handling using system
   #+NAME: emacs-url-handling
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq browse-url-browser-function 'browse-url-xdg-open)
   #+END_SRC

   #+RESULTS: emacs-url-handling
   : browse-url-xdg-open

** Default path
   #+NAME: default-path
   #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path
                 "~/.emacs.d/src")
   #+END_SRC
   
* Theme
  #+NAME: emacs-theme
  #+BEGIN_SRC emacs-lisp :tangle yes
    (defun setup-window-system-frame-colours (&rest frame)
      (if window-system
          (let ((f (if (car frame)
                       (car frame)
                     (selected-frame))))
            (progn
              (set-frame-font "Bera Sans Mono-11")
              (set-face-background 'default "#232F2F" f)
              (set-face-foreground 'default "#FFFFFF" f)
              (set-face-background 'fringe  "#000000" f)
              (set-face-background 'cursor "#2F4F4F" f)
              (set-face-background 'mode-line "#2F4F4F" f)
              (set-face-foreground 'mode-line "#BCBf91" f)))))

    (require 'server)
    (defadvice server-create-window-system-frame
      (after set-window-system-frame-colours ())
      "Set custom frame colours when creating the first frame on a display"
      (message "Running after frame-initialize")
      (setup-window-system-frame-colours))
    (ad-activate 'server-create-window-system-frame)
    (add-hook 'after-make-frame-functions 'setup-window-system-frame-colours t)

    (add-to-list 'custom-theme-load-path "~/.emacs.d/src/monokai-emacs")
    (load-theme 'monokai t)
  #+END_SRC

  #+RESULTS: emacs-theme
  | x-dnd-init-frame | setup-window-system-frame-colours |

* Parentheses
  #+NAME: emacs-parentheses
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path "~/.emacs.d/src/highlight-parentheses")
    (show-paren-mode 1)
    (require 'highlight-parentheses)
  #+END_SRC
  
* Orgmode
** Basics
   #+NAME: orgmode-basics
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
     (setq org-directory "~/org")
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
     ;(setq org-startup-indented t) ; bugs in overlay
     (setq org-default-notes-file (concat org-directory "/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)
   #+END_SRC

   #+RESULTS: orgmode-basics
   : browse-url-xdg-open

** Exports
   #+NAME: 
   #+BEGIN_SRC emacs-lisp :tangle yes
     ; your elisp code here
   #+END_SRC

** Captures
   #+NAME: org-capture
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'org-capture-after-finalize-hook
               (lambda () (if (< 1 (length (frames-on-display-list)))
                              (delete-frame))))
     (setq org-capture-templates
           '(
             ("t" "Todo" entry (file+headline "captures.org" "Tasks")
              "* TODO %?\n  %U\n  %i\n  %a")
             ("w" "conkeror-integration" entry (file+headline "captures.org" "Web")
              "* %?\n  Source: %u, %c\n\n  %i\n")
             ("b" "Buy" checkitem (file+headline "captures.org" "Buy"))
             ("j" "Journal" entry (file+datetree "journal.org")
              "* %?\n  Entered on %U\n  %i\n  %a")
             ))
   #+END_SRC

   #+RESULTS: org-capture
   | t | Todo                 | entry     | (file+headline captures.org Tasks) | * TODO %?\n  %U\n  %i\n  %a       |
   | w | conkeror-integration | entry     | (file+headline captures.org Web)   | * %?\n  Source: %u, %c\n\n  %i\n  |
   | b | Buy                  | checkitem | (file+headline captures.org Buy)   |                                   |
   | j | Journal              | entry     | (file+datetree journal.org)        | * %?\n  Entered on %U\n  %i\n  %a |

** Babel
   #+NAME: orgmode-babel
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;(org-confirm-babel-evaluate nil)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((R . t)
        (emacs-lisp . t)
        (plantuml . t)
        ))
     (setq org-plantuml-jar-path
           (expand-file-name "~/.emacs.d/plantuml.jar"))
     (setq org-confirm-babel-evaluate nil)
     (setq org-src-fontify-natively t)
     (setq org-export-htmlize-output-type 'inline-css)
   #+END_SRC

   #+RESULTS: orgmode-babel
   : inline-css

** Org-Impress-js
   #+NAME: org-impress.js
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-to-list 'load-path "~/.emacs.d/src/org-impress-js")
     (require 'ox-impress-js)
   #+END_SRC

   #+RESULTS: org-impress.js
   : org-impress-js

* PlantUML
   #+NAME: default-path
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'plantuml-mode)
   #+END_SRC
  
* Calfw
  Calendars in ~/calendar should be updated with cron.
  #+NAME: calendar
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path
                 "~/.emacs.d/src/emacs-calfw")
    (require 'calfw-cal)
    (require 'calfw-ical)
    (require 'calfw-org)
    
    (defun my-open-calendar ()
      (interactive)
      (cfw:open-calendar-buffer
       :contents-sources
       (list
        ;(cfw:org-create-source "Green")  ; orgmode source
        (cfw:cal-create-source "Orange") ; diary source
        (cfw:ical-create-source "main"  "~/calendars/my-main.ics" "IndianRed")
        (cfw:ical-create-source "bdays" "~/calendars/my-birthdays.ics" "Orange")
       )))
    
  #+END_SRC

  #+RESULTS: calendar
  : my-open-calendar

* Yasnippet
  #+NAME: yasnippet
  #+BEGIN_SRC emacs-lisp :tangle yes  
    (add-to-list 'load-path
                 "~/.emacs.d/src/yasnippet")
    (require 'yasnippet)
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"
                             "~/.emacs.d/src/yasnippet/yasmate/snippets"
                             "~/.emacs.d/src/yasnippet/snippets"
                             ))

    (defun yas/org-very-safe-expand ()
      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

    (add-hook 'org-mode-hook
              (lambda ()
                (make-variable-buffer-local 'yas/trigger-key)
                (setq yas/trigger-key [tab])
                (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                (define-key yas/keymap [tab] 'yas/next-field)))

    (yas-global-mode 1)
  #+END_SRC

  #+RESULTS: yasnippet
  : t

* Multiple Cursors
  #+NAME: emacs-mult-cursor
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path
                 "~/.emacs.d/src/multiple-cursors.el")
    (require 'multiple-cursors)
    (global-set-key (kbd "C-c m /") 'mc/edit-lines)
    (global-set-key (kbd "C-c m .") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-c m ,") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c m m") 'mc/mark-all-like-this)
  #+END_SRC

  #+RESULTS: emacs-mult-cursor
  : mc/mark-all-like-this

* Phi-search
  Incremental Search that works with Multiple Cursors.
  #+NAME: emacs-phi-search
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path
                 "~/.emacs.d/src/phi-search")
    (require 'phi-search)
    (global-set-key (kbd "C-s") 'phi-search)
    (global-set-key (kbd "C-r") 'phi-search-backward)
  #+END_SRC
* Expand Region
  #+NAME: expand-region
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path
                 "~/.emacs.d/src/expand-region.el")
    (require 'expand-region)
    (global-set-key (kbd "M-=") 'er/expand-region)
  #+END_SRC

  #+RESULTS: expand-region
  : er/expand-region
  
* Cucumber
  #+NAME: emacs-cucumber
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path "~/.emacs.d/src/cucumber.el")
    (require 'feature-mode)
  #+END_SRC
  
* Yaml
  #+NAME: emacs-yaml
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path "~/.emacs.d/src/yaml-mode")
    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
  #+END_SRC
  
* Fish
  #+NAME: emacs-fish
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path "~/.emacs.d/src/emacs-fish")
    (require 'fish-mode)
    (add-to-list 'auto-mode-alist '("\\.fish\\'" . fish-mode))
    (add-to-list 'interpreter-mode-alist '("fish" . fish-mode))
  #+END_SRC

  #+RESULTS: emacs-fish
  : fish-mode
  
* AUCTeX
  #+NAME: auctex
  #+BEGIN_SRC emacs-lisp :tangle yes
    (load "~/.emacs.d/src/auctex.el" nil t t)
    (load "~/.emacs.d/src/preview-latex.el" nil t t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)
  #+END_SRC

  #+RESULTS: auctex
  : t

* XPath -> XML
  #+NAME: xpath2xml
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path
                 "~/.emacs.d/src/zencoding")
    (require 'zencoding-mode)
    (add-hook 'nxml-mode-hook 'zencoding-mode)
  #+END_SRC

  #+RESULTS: xpath2xml
  | zencoding-mode |
  
* Haskell
  #+NAME: haskell
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path "~/.emacs.d/src/haskell-mode")
    (require 'haskell-mode-autoloads)
  #+END_SRC

  #+RESULTS: haskell
  | turn-on-haskell-indentation | turn-on-haskell-doc-mode |
  
* Perl
  #+NAME: perl
  #+BEGIN_SRC emacs-lisp :tangle yes
    (defalias 'perl-mode 'cperl-mode)
    (require 'perltidy)
    (require 'flymake)
    (require 'perl-completion)
    (eval-after-load 'perl-mode
      '(define-key perl-mode-map (kbd "C-c p") 'perltidy-dwim))
    (add-hook 'perl-mode-hook
              (lambda ()
    ;            (flymake-mode t)
    ;            (perl-completion-mode t)
                ))
  #+END_SRC

  #+RESULTS: perl
  | lambda | nil | (flymake-mode t) | (perl-completion-mode t) |
  | lambda | nil | (flymake-mode 1) |                          |

* Definitions
** Eval elips anywhere and replace with result
   #+NAME: eval-and-replace
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun eval-and-replace ()
       "Replace the preceding sexp with its value."
       (interactive)
       (backward-kill-sexp)
       (condition-case nil
           (prin1 (eval (read (current-kill 0)))
                  (current-buffer))
         (error (message "Invalid expression")
                (insert (current-kill 0)))))
   #+END_SRC

   #+RESULTS: eval-and-replace
   : eval-and-replace

** Kill file
   #+NAME: kill-file
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun delete-current-buffer-file ()
       "Removes file connected to current buffer and kills buffer."
       (interactive)
       (let ((filename (buffer-file-name))
             (buffer (current-buffer))
             (name (buffer-name)))
         (if (not (and filename (file-exists-p filename)))
             (ido-kill-buffer)
           (when (yes-or-no-p "Are you sure you want to remove this file? ")
             (delete-file filename)
             (kill-buffer buffer)
             (message "File '%s' successfully removed" filename)))))
     (global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)
   #+END_SRC

   #+RESULTS: kill-file
   : delete-current-buffer-file

** Rename file
   #+NAME: rename-file
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun rename-current-buffer-file ()
       "Renames current buffer and file it is visiting."
       (interactive)
       (let ((name (buffer-name))
             (filename (buffer-file-name)))
         (if (not (and filename (file-exists-p filename)))
             (error "Buffer '%s' is not visiting a file!" name)
           (let ((new-name (read-file-name "New name: " filename)))
             (if (get-buffer new-name)
                 (error "A buffer named '%s' already exists!" new-name)
               (rename-file filename new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil)
               (message "File '%s' successfully renamed to '%s'"
                        name (file-name-nondirectory new-name)))))))
     (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
   #+END_SRC

   #+RESULTS: rename-file
   : rename-current-buffer-file

** Transpose Lines
   #+NAME: transpose-lines
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun move-line-down ()
       (interactive)
       (let ((col (current-column)))
         (save-excursion
           (forward-line)
           (transpose-lines 1))
         (forward-line)
         (move-to-column col)))
     (defun move-line-up ()
       (interactive)
       (let ((col (current-column)))
         (save-excursion
           (forward-line)
           (transpose-lines -1))
         (move-to-column col)))
     (global-set-key (kbd "<C-S-down>") 'move-line-down)
     (global-set-key (kbd "<C-S-up>") 'move-line-up)
   #+END_SRC

   #+RESULTS: transpose-lines
   : move-line-up
   
** Open Line (above or below)
   #+NAME: open-line
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun open-line-below ()
       (interactive)
       (end-of-line)
       (newline)
       (indent-for-tab-command))
     (defun open-line-above ()
       (interactive)
       (beginning-of-line)
       (newline)
       (forward-line -1)
       (indent-for-tab-command))
     (global-set-key (kbd "<C-return>") 'open-line-below)
     (global-set-key (kbd "<C-S-return>") 'open-line-above)
   #+END_SRC

   #+RESULTS: open-line
   : open-line-above

** Relative Line Numbers
   #+NAME: linum-relative
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq linum-last-pos 0) ; needed during sturtup
     
     (defadvice linum-update (before linum-relativenumber-linum-update activate)
       (setq linum-last-pos (line-number-at-pos)))
     
     (defun linum-relativenumber-format (line-number)
       (let ((diff (abs (- line-number linum-last-pos)))
             (w (length (number-to-string
                         (count-lines (point-min) (point-max))))))
         (concat (format "%d" line-number)
                 (format (concat "%" (number-to-string (+ 1 w (- w (length (number-to-string line-number))))) "d ")
                         diff))))
     
     (defun goto-line-with-feedback ()
       "Show line numbers temporarily, while prompting for the line number input"
       (interactive)
       (unwind-protect
           (progn
             (linum-mode 1)
             (goto-line (read-number "Goto line: ")))
         (linum-mode -1)))
     
     ;(global-set-key [remap goto-line] 'goto-line-with-feedback)
     (setq linum-format 'linum-relativenumber-format)
   #+END_SRC

   #+RESULTS: linum-relative
   : linum-relativenumber-format

** Don't kill emacs by accident
   #+NAME: emacs-no-kill
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun dont-kill-emacs ()
       (interactive)
       (error (substitute-command-keys "To exit emacs: \\[kill-emacs]")))
     (global-set-key "\C-x\C-c" 'dont-kill-emacs)
     (global-set-key (kbd "C-x r q") 'save-buffers-kill-terminal)
   #+END_SRC

   #+RESULTS: emacs-no-kill
   : save-buffers-kill-terminal

** Backups
   #+NAME: backups
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq vc-make-backup-files t)
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                      (concat user-emacs-directory ".backups")))))
   #+END_SRC

   #+RESULTS: backups
   | (. . /home/sizur/.emacs.d/.backups) |
   
** Remember position
   #+NAME: remem-pos
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'saveplace)
     (setq-default save-place t)
     (setq save-place-file (expand-file-name ".places" user-emacs-directory))
   #+END_SRC

   #+RESULTS: remem-pos
   : /home/sizur/.emacs.d/.places
* Autoload at start
  #+NAME: emacs-at-start
  #+BEGIN_SRC emacs-lisp :tangle yes
    (server-start)
    (require 'org-protocol)
    (org-agenda-list)
  #+END_SRC

  #+RESULTS: emacs-at-start
  
* Magit
  #+NAME: emacs-magit
  #+BEGIN_SRC emacs-lisp :tangle yes
    (add-to-list 'load-path "~/.emacs.d/src/git-modes")
    (add-to-list 'load-path "~/.emacs.d/src/magit")
    (eval-after-load 'info
      '(progn (info-initialize)
              (add-to-list 'Info-directory-list "~/.emacs.d/src/magit")))
    (require 'magit)
  #+END_SRC

